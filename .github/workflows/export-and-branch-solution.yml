name: Export and Branch BRWI Solution
description: This workflow exports the BRWI solution from DEV, unpacks it, and prepares a branch for changes.
# This workflow is designed to export a solution from the Power Platform DEV environment,
# Export solution from DEV environment
# unpack it and prepare, commit and push a git branch with the changes
# Who Am I: Ensures that you can successfully connect to the environment you are exporting from.
# Export Solution: Exports the solution file from your development environment.
# Unpack Solution: The solution file that is exported from the server is a compressed (zip) file with consolidated configuration files. These initial files are not suitable for source code management as they are not structured to make it feasible for source code management systems to properly do differencing on the files and capture the changes you want to commit to source control. You need to 'unpack' the solution files to make them suitable for source control storage and processing.
# Branch Solution: Creates a new branch to store the exported solution.

on:
  workflow_dispatch:
    inputs:
      # Change this value
      solution_name:
        description: 'name of the solution to worked on from Power Platform'
        required: true
        default: BRWISolution
       #Do Not change these values
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
       description: 'folder name to be created and checked in *do not change*'
       required: true
       default: solutions/
env:
#edit your values here
  ENVIRONMENT_URL: 'https://roar-brwi-dev.crm.dynamics.com/'
  CLIENT_ID: '01fa8c0f-e434-4909-a248-4e34f6a2ef36'
  TENANT_ID: '68fada1a-be1c-4dff-a018-be23fb5b8ea6'
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Install Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1.9.1

    - name: Verify Environment Variables
      run: |
        Write-Host "=== ENVIRONMENT VERIFICATION ==="
        Write-Host "Environment URL: ${{env.ENVIRONMENT_URL}}"
        Write-Host "Client ID: ${{env.CLIENT_ID}}"
        Write-Host "Tenant ID: ${{env.TENANT_ID}}"
        Write-Host "Solution Name: ${{ github.event.inputs.solution_name }}"
        Write-Host "================================"
      shell: pwsh

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1.9.1
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}


    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1.9.1
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip

    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1.9.1
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ github.event.inputs.solution_name }}
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v1.9.1
      with:
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ github.event.inputs.solution_name }}
        solution-target-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true
